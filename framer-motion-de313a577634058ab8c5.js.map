{"version":3,"file":"framer-motion-de313a577634058ab8c5.js","mappings":"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","sources":["webpack://rishikc.com/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/debug/record.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://rishikc.com/./node_modules/framer-motion/dist/es/render/dom/features-max.mjs"],"sourcesContent":["const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { frame, cancelFrame } from '../../frameloop/index.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import { frame } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { cancelFrame, steps, frame } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n"],"names":["distance","a","b","Math","abs","PanSession","constructor","event","handlers","transformPagePoint","this","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","x","yDelta","y","sqrt","distance2D","offset","point","timestamp","push","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","window","updateHandlers","subtractPoint","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","length","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","calcLength","axis","max","min","isNear","value","target","maxDistance","calcAxisDelta","source","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","undefined","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","eachAxis","callback","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","presenceContext","isPresent","panSession","stopAnimation","drag","dragPropagation","onDragStart","getProps","resolveConstraints","projection","isAnimationBlocked","current","getAxisMotionValue","get","measuredAxis","layoutBox","parseFloat","animationState","setActive","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","render","stop","getTransformPagePoint","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","next","applyConstraints","set","dragConstraints","prevConstraints","resolveRefConstraints","top","left","bottom","right","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measure","root","measuredConstraints","calcViewportConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","sourceLength","targetLength","progress","clamp","calcOrigin","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","DragGesture","Feature","node","super","removeGroupControls","noop","controls","mount","dragControls","subscribe","unmount","asyncHandler","handler","PanGesture","arguments","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","update","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","template","xScale","yScale","averageScale","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","options","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","context","useContext","id","useId","useEffect","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","borders","numBorders","asNumber","isPx","getRadius","values","radiusName","easeCrossfadeIn","compress","circ","easeCrossfadeOut","easing","p","copyAxisInto","originAxis","copyBoxInto","box","originBox","removePointDelta","boxScale","removeAxisTransforms","transforms","key","scaleKey","originKey","sourceAxis","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","forEach","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","rotate","rotateX","rotateY","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","child","sort","transformAxes","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","Set","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","data","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","name","has","notifyListeners","args","subscriptionManager","notify","hasListeners","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","performance","now","checkElapsed","elapsed","delay","finishAnimation","registerSharedNode","animate","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","resetTransformStyle","notifyLayoutUpdate","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","measurePageBox","removeElementScroll","roundAxis","measuredBox","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","from","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","keyframes","motionValue$1","animation","animateSingleValue","onUpdate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","pointerEvents","emptyStyles","valuesToRender","transformOrigin","corrected","num","resetTree","clear","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","duration","ease","round","DocumentProjectionNode","ref","document","documentElement","scrollLeft","body","scrollTop","rootProjectionNode","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","ProjectionNode","domMax"],"sourceRoot":""}